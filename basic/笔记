mongodb:
进入meteor的mogodb环境：meteor mongo
update方法：
1.直接update数据，复盖式更新整条数据
2.{$set:{field:value}}，将field字段的值设置为value
3.{$inc:{field:value}}，对一个数字字段field，叠加值value
4.{$unset:{field:1}},删除字段field
5.{$push:{field:value}}将value追加到field字段中，如果field字段不存在，会自动创建一个array类型 
6.{$pushAll:{field:value_array}}将多到值追加到field字段中，传入一个数组
7.{$addToSet:{field:value}} 如果field中不存在value这个值，增加一个值到数组内
8.{$pop:{field:1/-1}} 删除field数组内的一个值，1是最后一个，-1是第一个值
9.{$pull:{field:value}} 删除field字段中一个等于value的值
10.{$pullAll:{field:value_array}}删除field字段中的多个值（与value_array相等）
11.$代表找到结果的自身，但只应用于第一条数据
8-14

----meteor发布订阅一个表，参考labelManage.js
1.在publications--> labelManage.js发布，可以监听新增，变化，删除事件
2.package---> rocketchat-lib---> server---> models-->LabelTab.coffee写入一些改变数据（集合）的方法
3.在客户端通过Meteor.subscribe('labelGroups',companyId)来订阅
4.注册集合与别名（RocketChat.models.Labels）：package---> rocketchat-ui---> lib---> collections.coffee  例 new Meteor.Collection('labelGroupsList')
接口：
机器人发消息：sendMessageByChatbot()
创建点对点聊天：createDirectMessageByChatbot()
暴露接口(活跃度)：
packages/meteor-message-api
异步改同步，简单又好用 fiber包
绑定Meteor执行环境，例 Meteor.bindEnvironment(()=> //dosomething
	Meteor.call('Allusers',function(err,res){ return res;});
)





小知识点：
堆栈溢出：不顾堆栈内存中分配的局部数据块大小，在数据块中写入了过多的数据，导致数据超出，覆盖了别的数据，经常在递归中发生。
内存溢出：是指在申请内存时，没有足够的空间提供其使用。比如在c++中，申请一个int类型的内存空间，传入一个long类数值，不够存储，内存溢出。
内存泄漏：用动态存储分配函数内存空间，在使用完毕后没有得到释放，一直占据内存空间，直到程序结束。
内存泄漏发生表怳：1.setTimeout()第一个参数为字符串而不是函数时 2.闭包，控制台日志，相互循环；
防止内存泄漏：
	1、不要动态绑定事件；(可能会循环)
	2、不要在动态添加，或者会被动态移除的dom上绑事件，用事件冒泡在父容器监听事件；(可能会让事件循环绑定或触发)
	3、如果要违反上面的原则，必须提供destroy方法，保证移除dom后事件也被移除，这点可以参考Backbone的源代码，做的比较好；
	4、单例化，少创建dom，少绑事件。

常见http协议码
200：请求成功
201：请求成功并且服务器创建了新的资源
302：服务器当前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应之后的请求。
304：上次请求后，网页未被修改过，服务器返回此响应时，不会返回网页的内容。
400：服务器不理解请求的语法。
404：请求资源不存在。
500：内部服务器错误。

小知识：
  1. null>0 //false    null==0  //false    null>=0 //true
     因为Number(null)==0,但是在执行null==0时，null和undefined不会调用Number()进行转换
  2.个别电脑访问不了个别接口，报错：net::ERR_ADDRESS_UNREACHABLE
    DNS配置问题，可以ping一下接口域名，再修改host文件，从外部访问
  3.replace方法如果第二个参数是函数，可以接受$0,$1..$99这种参数，第一个参数是正则的结果，第二个参数是正则的第一个子表达试的值，要求以$开头。
  4.关闭linux进程命令：gnome-system-monitor
  5.setTimeout(fn,0)不会立即执行。是要等同步事件执行完后才执行，处于消息队列末端。下一次EventLoop才执行。
    正常任务在下一轮EventLoop执行，微任务在本轮结束开始执行。setTimeout属于正常任务，微任务主要是process.nextTick和Promise。所以Promise.resolve在setTimeout(fn,0)前面执行
  6.具名函数：创建一个变量，内容为一个带有名称的函数,如： var fn1=function test(){};  //此时test函数名只能在函数的内部使用。
  7.直接通过给new Function('do something')传递字符串来创建函数，创建的是匿名函数
  8.''==false	//true     []==false  //true     {}==false   //false    注：除null和undefined以外，用==做比较时会自动调用valueOf()或toString()方法。有二者会转成0==false,而对象会转为NaN不大于0也不小于0.{}==false和{}==true都为false



《大话数据结构》
渐近增长越快的算法越不好
线性表：
顺度存储三属性：存储空间起始(数组data），线性表最大存储容量（array.length尽量不变）,线性表长度（可变）
线性长度应小于数组（存储）长度
地址计算 LOC(ai)=LOC(a1)+(i-1)*c  //1.a后的数为下标，c是单个占用的存储单元
				//2.每个单元的存储时间相等，时间复杂度计为O(1),叫随机存储结构。
线性表的抽象数据类型方法：
InitList(*L)  	初始化一个线性表
ListEmpty(L)  	判断线性表是否为空，返回true,否则返回false.
ClearList(*L) 	清空线性表
GetElem(L,i,*e) 将线性表L的第i个元素返回给e.
LocateElem(L,e) 判断线性表L是否存在元素e，存在返回序号(下标)，否则返回0
ListInsert(*L,i,e) 在线性表L中的第i个元素位置插入元素e
ListDelete(*L,i,e) 删除线性表L的第i个元素，并用e返回其值
ListLength(L)  返回线性表L的元素个数
单链表：
结表表示：设P是指向线性表第i个元素的指针，节点名为ai。 那么ai的数据域可以表示p->data, ai的指针表示 p->next。
	  也就是说p->data=ai, p->next->data=a(i+1)


面向对象编程
构造函数名首字母大写
function Fubar(){
  this.name='circle',	//构造函数的this,指向所有实例，这里指向v
  this.age=12
}
var v=new Fubar();
v.name	//'circle'

new关建字都做了什么：
1.创建一个空对象，作为将要返回的对象实例
2.将这个空对象的原型，指向构造函数的prototype属性
3.将这个空对象赋值给函数内部的this关键字
4.开始执行构造函数内部的代码
注：new命令总是返回一个对象，要么是实例，要么是return后面的对象，或空对象
在构造函数里使用 new.target 表示this(实例)是否是来自new关键字，是的话返回构造函数

如果构造函数返回的是一个新对象n，当实例化构造函数时，this返回为对象n
对普通函数使用new关键字，返回一个空对象

var person2=Object.create(person1);  //person2继承了person1的属性与方法
例 var person1={name:"keyue",like:{paly:'game',study:'english'}}
   var person2=Object.create(person1); 
       person1.like.paly='panio';
       person1.name='circle';
	console.log(person1);	//{name:'keyue',like:{paly:'panio',study:'english'}};    因为name是原始类型，like的值paly是引用类型
	console.log(person2);   //{name:'circle',like:{paly:'panio',study:'english'}};   
查询person对象的key:
  Object.keys(person);	//查询自身可枚举的属性
  for key in person    //会查自身及原型链上查找可枚举的属性
  Object.getOwnPropertyNames()  //查找自身的所有属性，不包含继承属性名
判断是否是自身属性:
1. Object.hasOwnProperty('name')   //而非来自原型链和继承
2.'length' in Date	//in 只要存在就返回true，不管是否来自继承
3.for key in person   //自身+继承+可枚举

查找对象属性举例：
var o1={p1:123}
var o2=Object.create(o1,{p2:{value:345,enumerable:true},p3:{value:'hello'}});  //create的第二个参数：给o2自身增加属性，值要以对象形式声明，可写，可枚举，可配置要显示标明，否则默认为false
Object.getOwnPropertyNames(o2);  //p2,p3   自身属性
o2.hasOwnPropertyNames('p1');  //false  验证是否是自身的属性
Object.keys(o2);    //p2   自身可枚举属性
for key in o2	    //p1,p2  //自身及原型链上可枚举属性

原型对象 prototype:
1.实例的原型对象指向构造函数的原型
f.color先到实例f自身找color属性，再到构造函数内部找，再到原型对象上找
获取到某个对象的原型对象即构造函数原型：Object.getPrototypeOf(Object.prototype)   //return null;
注：实例有原型对象即构造函数的原型，但实例没有原型属性
constructor属性：
prototype默认有一个constructor属性，默认指向prototype所在的构造函数，并非是父级。  例 p.prototype.constructor===p  //true
做原型赋值或继承时，要重定向一次constructor
例： function P(){};
     function C(){P.call(this);};
     C.prototype=Object.creat(p.prototype);
     C.constructor=C;

o1.isPrototypeOf(o2);  //判断o1是否在o2的原型链上
Object.prototype.__proto__
支持__proto__属性的浏览器，__proto__指向当前对象的原型对象，即构造函数的prototype属性。
可以改写原型对象，例 ：
	var obj={};
	var p={};
	obj.__proto__=p;
	Object.getPrototypeOf(obj)===p  //true   ,不提昌，建议用Object.getprototypeOf()和Object.setPrototypeOf()

获取实例的原型对象三种方法：
obj.__proto__
obj.constructor.prototype	//不要用此方法直接改原型对象，除非同时修改构造函数指向
Object.getPrototypeOf(obj)


this-------------------

this总是返回一个对象
this的使用场景
1.全局环境 ：this指向window
2.构造函数: this指向实例
3.自调用函数：this指向window
4.如果某方法m在一个对象的多层内部，那么this只是指向当前一层的对象，不会继承更上的层。
	例：	var obj={
			name:'keyue',
			b:{
			  m:function(){
			    return this.name;	//undefined ,此时this指向b并非obj
			  }
			}		
		}

扩展：
1.setTimeout第一个参数是对象或构造函数时，对象属性的方法中的this不是指向这个对象，而是全局window
  例：   function O(name){
		this.a=name,	//this指向oo
		this.fn=function(){ console.log(this.name);	//(2)
	}};
	var name='age';
	var oo=new O('kk')
	setTimeout(oo.fn,1000);	//'age'   (2)在setTimeout中，this指向window
解决办法  setTimeout(function(){oo.fn()},1000)
this的使用注意
1.因为this是动态的，所以不要在一个对象的多层下用this,可以选择赋值给一个变量保存下来
   严格模式下，对象的内部this指向window会报错
2.避免数组处理方法中的this。forEach,map方法中的参数--function和自调用函数一样，指向window
	可通过第二个参数绑定执行环境，如：var obj={
					 name:'demo',
					 m:function(){
					  arr.forEach(function(val){console.log(this.name)},this);  //this指向obj
					}}
3.避免回调函数中的this,有可能会被改变

切换/绑定this
1.call 第二个参数为数列
2.apply	第二个参数为数组
   (1)将数组空元素转为‘undefined’:	Array.apply(null,arr)
   (2)将类似数组的对象转为数组：		[].slice.apply(null,arguments)
3.bind	将函数体内部的this绑定到bind的参数中，bind可以绑定前面的部分绑数，在赋值为一个函数时有应用
注：三种方式第一个参数如果为空、null、undefined则默认this为全局对象window. 若第一个参数是原始类型，如果转为包装对象{[[PrimitiveValue]]:5}。用call和apply绑定的函数会立即执行一次。bind不会立即执行。





ES6:
1、解构：
   解构可以不完全解构，即传多少，解多少
   数组的解构赋值右边必须是数组或类似数组(字符串)
   允许指定默认值，如果赋值不===undefined,默认值不生效。 let [x,y=9]=['a',undefied];  //x='a',y=9  如果赋值成功，则默认值代码不会执行
   对象的解构没有次序，变量与属性名必须同名。如果不一致，则应如下： 
	let {foo:baz}={foo:"hello",bar:"world"};  console.log(baz,foo)  //"hello",foo is not defined
   解构可以数组与对象嵌套使用
     let obj={
       p:['hello',{y:'world'}];
     }
     let {p,p:[x,{y}]}=obj;	//为了给p赋值，前面才加p变量
      console.log(x,y,p)  // "hello","world",["hello",{y:"world"}]
   解构赋值时，右边是数字或布尔值，则会先转为对象
   注：解构的变量声明时不要使用圆括号会报错，赋值时可以用，尽量不要用。
2、const  常量声明，常量的值不可以被改变
3、Set  新数据结构，类似数组，本身是一个构造函数，Set数据里不会有重复的值  var s=new Set()
4、Set的属性与方法：
	s.size()     返回成员总数
	s.add(2)     添加一个新值2
	s.delete(2)  删除值2
	s.has(2)     返回布尔值，判断是否有为2的值
	s.clear()    清除所有值
5、Map 数据结构，与Set的属性与方法一样，set替换了add()，加了get(key)方法，Map是键值对。var m=new Map();  m.set('name','keyue');
6、参数的解构：rest(...)运算符。指可以向函数传递任意数量的参数，(...values)为形参，参数都存储在里面，可以解构。
例：   function(s,...values){
	  for(val in values){
	     s+=val;
	  }
	  return s;
	}
也可以将数组转为参数，例：
	function f(s1,s2,s3,s4){console.log(s1+s2+s3+s4);}
	var a=["a2","a3","a4"];
	f("a1",...a)		//result:  a1a2a3a4

7、generator函数，属于内部遍历器。当调用generator函数的时候，该函数并不执行，而是返回一个遍历器。以后，每次调用这个遍历器的next方法，就从函数体的头部或者上一次停下来的地方开始执行，直到遇到下一个yield语句为止，并返回该yield语句的值。yield有点类似于return语句，都能返回一个值。区别在于每次遇到yield，函数返回紧跟在yield后面的那个表达式的值，然后暂停执行，下一次从该位置继续向后执行。
例：function* helloWorldGenerator(){
	yield 'hello';
	yield 'world';
     }
    var hw=helleWorldGenerator();  //不执行，返回一个遍历器
    hw.next();	// {value:'hello',done:false}   执行到第一个yield语句并返回和结束
    hw.next();	// {value:'world',done:false}   从上一次的yield语句开始执行，直到下一个yield语句返回并结束
    hw.next();  // {value:undefined,done:true}  从上一次的yield语句开始执行，没有下一个yield语句就改变状态并返回
    //generator函数的重要意义在于操作异步函数


